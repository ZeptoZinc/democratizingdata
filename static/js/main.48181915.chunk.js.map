{"version":3,"sources":["cssutils/breakpoints.ts","cssutils/container.ts","basepage/Header.tsx","basepage/Description.tsx","dataselection/LabelCSS.ts","dataselection/TextInputCSS.ts","dataselection/ProcessData.ts","dataselection/Slice.ts","dataselection/DateSelection.tsx","dataselection/TickerSelection.tsx","dataselection/DataSelection.tsx","basepage/Body.tsx","basepage/App.tsx","cssutils/normalizeCSS.ts","cssutils/RootStyling.tsx","redux/ReduxReducer.ts","redux/ReduxStore.ts","serviceWorker.ts","index.tsx"],"names":["breakpointMQ","map","bp","container","css","width","maxWidth","headerStyle","marginLeft","marginRight","marginBottom","paddingTop","paddingBottom","display","alignItems","flexDirection","justifyContent","borderBottom","titleStyle","fontSize","fontFamily","yearStyle","Header","href","rel","descriptionStyle","paragraphStyle","linkStyle","color","codeStyle","backgroundColor","paddingLeft","paddingRight","borderRadius","Description","labelCSS","alignSelf","textInputCSS","border","borderWidth","borderColor","processData","createAsyncThunk","payload","thunkAPI","a","tickerStr","tickers","startDateStr","startDate","endDateStr","endDate","split","Date","resultArray","i","length","date","yearStr","getUTCFullYear","toString","monthStr","getUTCMonth","padStart","dateStr","getUTCDate","dataURL","axios","get","response","parsed","parse","data","columns","push","setDate","getDate","resultCSV","stringify","key","console","log","element","document","createElement","file","Blob","type","URL","createObjectURL","download","body","appendChild","click","dataSelectionSlice","createSlice","name","initialState","errorHtml","isLoading","reducers","updateTickers","state","action","updateStartDate","updateEndDate","updateErrorHtml","extraReducers","builder","addCase","pending","_","fulfilled","rejected","actions","reducer","dateSelectionCSS","dateCSS","flexBasis","padding","DateSelection","dispatch","useDispatch","useSelector","dataSelection","placeholder","value","onChange","event","preventDefault","target","tickerSelectionCSS","TickerSelection","dataSelectionStyle","downloadButtonStyle","cursor","DataSelection","onClick","bodyStyle","Body","appStyle","minHeight","App","normalizeCSS","normalizeStyle","RootStyling","styles","rootReducer","combineReducers","dataSelectionReducer","store","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48181915.chunk.js","sourcesContent":["const breakpoints = [640, 768, 1024, 1280];\n\nexport const breakpointMQ = breakpoints.map(\n  (bp) => `@media (min-width: ${bp}px)`,\n);\n","import { css } from '@emotion/core';\n\nimport { breakpointMQ } from './breakpoints';\n\nexport const container = css({\n  width: '100%',\n  [breakpointMQ[0]]: {\n    maxWidth: '640px',\n  },\n  [breakpointMQ[1]]: {\n    maxWidth: '768px',\n  },\n  [breakpointMQ[2]]: {\n    maxWidth: '1024px',\n  },\n  [breakpointMQ[3]]: {\n    maxWidth: '1280px',\n  },\n});\n","/** @jsx jsx */\n\nimport React from 'react';\nimport { css, jsx } from '@emotion/core';\n\nimport { container } from '../cssutils/container';\n\nconst headerStyle = css(\n  {\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    marginBottom: '1rem',\n    paddingTop: '1rem',\n    paddingBottom: '0.25rem',\n    display: 'flex',\n    alignItems: 'flex-end',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    borderBottom: '1px solid #FFFFFF',\n  },\n  container,\n);\n\nconst titleStyle = css({\n  fontSize: '1.5rem',\n  fontFamily: 'Alata, sans-serif',\n});\n\nconst yearStyle = css({\n  fontFamily: 'Alata, sans-serif',\n});\n\nexport const Header: React.SFC = () => (\n  <header css={headerStyle}>\n    <div>\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Alata&display=swap\"\n        rel=\"stylesheet\"\n      />\n      <div css={titleStyle}>Democratizing Data</div>\n    </div>\n    <div css={yearStyle}>2020-</div>\n  </header>\n);\n","/** @jsx jsx */\n\nimport React from 'react';\nimport { css, jsx } from '@emotion/core';\n\nconst descriptionStyle = css({ marginBottom: '1rem' });\n\nconst paragraphStyle = css({ paddingBottom: '0.5rem' });\n\nconst linkStyle = css({\n  color: '#00B4D8',\n});\n\nconst codeStyle = css({\n  fontFamily: \"'IBM Plex Mono', monospace\",\n  backgroundColor: '#333333',\n  paddingLeft: '0.15rem',\n  paddingRight: '0.15rem',\n  marginLeft: '0.2rem',\n  marginRight: '0.2rem',\n  display: 'inline',\n  borderRadius: '0.2rem',\n});\n\nexport const Description: React.SFC = () => (\n  <div css={descriptionStyle}>\n    <div css={paragraphStyle}>\n      We wish to democratize access to US Stock Market data. As stated by the\n      one and only Andy Pavlo, it{' '}\n      <a href=\"https://www.cs.cmu.edu/~pavlo/datasets/stocks/\" css={linkStyle}>\n        \"is not trivial to find all this information for free.\"\n      </a>{' '}\n      The internet is about making data free and open to the masses. Help us and\n      join the cause by adding data on{' '}\n      <a href=\"https://github.com/ZeptoZinc/democratizingdata\" css={linkStyle}>\n        GitHub\n      </a>\n      . If you do not wish to use the data selector, you may also go straight to\n      GitHub to browse the raw CSVs.\n    </div>\n    <div css={paragraphStyle}>\n      Data takes the form of{' '}\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=IBM+Plex+Mono&display=swap\"\n        rel=\"stylesheet\"\n      ></link>\n      <div css={codeStyle}>\n        &lt;QUOTE TIME BY MINUTE, TICKER, OPEN, HIGH, LOW, CLOSE, VOLUME&gt;\n      </div>\n      .\n    </div>\n  </div>\n);\n","import { css } from '@emotion/core';\n\nexport const labelCSS = css({\n  fontSize: '0.8rem',\n  display: 'flex',\n  flexDirection: 'column',\n  paddingBottom: '0.5rem',\n  alignSelf: 'stretch',\n});\n","import { css } from '@emotion/core';\n\nexport const textInputCSS = css({\n  backgroundColor: '#000000',\n  border: 'solid',\n  borderWidth: '1px',\n  borderColor: '#FFFFFF',\n  borderRadius: '0.25rem',\n});\n","import axios from 'axios';\n\nimport parse from 'csv-parse/lib/sync';\nimport stringify from 'csv-stringify/lib/sync';\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\ninterface DataRow {\n  Datetime: string;\n  Ticker: string;\n  Open: string;\n  High: string;\n  Low: string;\n  Close: string;\n  Volume: string;\n}\n\nexport const processData = createAsyncThunk(\n  'dataSelection/processData',\n  async (\n    payload: { tickers: string; startDate: string; endDate: string },\n    thunkAPI,\n  ) => {\n    const {\n      tickers: tickerStr,\n      startDate: startDateStr,\n      endDate: endDateStr,\n    } = payload;\n\n    const tickers = tickerStr.split(',');\n    const startDate = new Date(startDateStr);\n    const endDate = new Date(endDateStr);\n\n    const resultArray: DataRow[] = [];\n\n    for (let i = 0; i < tickers.length; i++) {\n      for (\n        let date = new Date(startDate);\n        date < endDate;\n        date.setDate(date.getDate() + 1)\n      ) {\n        const yearStr = date.getUTCFullYear().toString();\n        const monthStr = (date.getUTCMonth() + 1).toString().padStart(2, '0');\n        const dateStr = date.getUTCDate().toString().padStart(2, '0');\n\n        const dataURL = `https://raw.githubusercontent.com/ZeptoZinc/democratizingdata-data-${yearStr}/master/${tickers[i]}/${monthStr}/${dateStr}.csv`;\n\n        try {\n          const response = await axios.get(dataURL);\n          const parsed = parse(response.data, { columns: true });\n          resultArray.push(...parsed);\n        } catch (error) {}\n      }\n    }\n    // Stringify resulting CSV\n    const resultCSV = stringify(resultArray, {\n      columns: [\n        { key: 'Datetime' },\n        { key: 'Ticker' },\n        { key: 'Open' },\n        { key: 'High' },\n        { key: 'Low' },\n        { key: 'Close' },\n        { key: 'Volume' },\n      ],\n    });\n\n    console.log('result CSV: ', resultCSV);\n\n    // Compose file and download\n    const element = document.createElement('a');\n    const file = new Blob([resultCSV], { type: 'text/plain' });\n    element.href = URL.createObjectURL(file);\n    element.download = 'DemocratizingData.csv';\n    document.body.appendChild(element);\n    element.click();\n  },\n);\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { processData } from './ProcessData';\n\nexport const dataSelectionSlice = createSlice({\n  name: 'dataSelection',\n  initialState: {\n    tickers: '',\n    startDate: '',\n    endDate: '',\n    errorHtml: '',\n    isLoading: false,\n  },\n  reducers: {\n    updateTickers(state, action) {\n      state.tickers = action.payload;\n    },\n    updateStartDate(state, action) {\n      state.startDate = action.payload;\n    },\n    updateEndDate(state, action) {\n      state.endDate = action.payload;\n    },\n    updateErrorHtml(state, action) {\n      state.errorHtml = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(processData.pending, (state, _) => {\n      state.isLoading = true;\n    });\n    builder.addCase(processData.fulfilled, (state, _) => {\n      state.isLoading = false;\n    });\n    builder.addCase(processData.rejected, (state, _) => {\n      state.isLoading = false;\n    });\n  },\n});\n\nconst { actions, reducer } = dataSelectionSlice;\nexport { reducer as dataSelectionReducer };\n\nexport const {\n  updateTickers,\n  updateStartDate,\n  updateEndDate,\n  updateErrorHtml,\n} = actions;\n\nexport { processData };\n","/** @jsx jsx */\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { css, jsx } from '@emotion/core';\n\nimport { labelCSS } from './LabelCSS';\nimport { textInputCSS } from './TextInputCSS';\nimport { RootState } from '../redux/ReduxReducer';\nimport { updateStartDate, updateEndDate } from './Slice';\n\nconst dateSelectionCSS = css({\n  alignSelf: 'stretch',\n  display: 'flex',\n  flexDirection: 'row',\n});\n\nconst dateCSS = css({ flexBasis: '50%', padding: '20px 0px' });\n\nexport const DateSelection: React.SFC = () => {\n  const dispatch = useDispatch();\n  const { startDate, endDate } = useSelector(\n    (state: RootState) => state.dataSelection,\n  );\n\n  return (\n    <div css={dateSelectionCSS}>\n      <div css={dateCSS}>\n        <label css={labelCSS}>\n          Start Date\n          <input\n            type=\"text\"\n            css={textInputCSS}\n            placeholder=\"YYYY-MM-DD\"\n            value={startDate}\n            onChange={(event) => {\n              event.preventDefault();\n              dispatch(updateStartDate(event.target.value));\n            }}\n          />\n        </label>\n      </div>\n      <div css={dateCSS}>\n        <label css={labelCSS}>\n          End Date\n          <input\n            type=\"text\"\n            css={textInputCSS}\n            placeholder=\"YYYY-MM-DD\"\n            value={endDate}\n            onChange={(event) => {\n              event.preventDefault();\n              dispatch(updateEndDate(event.target.value));\n            }}\n          />\n        </label>\n      </div>\n    </div>\n  );\n};\n","/** @jsx jsx */\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { jsx, css } from '@emotion/core';\n\nimport { RootState } from '../redux/ReduxReducer';\n\nimport { updateTickers } from './Slice';\n\nimport { labelCSS } from './LabelCSS';\nimport { textInputCSS } from './TextInputCSS';\n\nconst tickerSelectionCSS = css({\n  alignSelf: 'stretch',\n});\n\nexport const TickerSelection: React.SFC = () => {\n  const dispatch = useDispatch();\n  const { tickers } = useSelector((state: RootState) => state.dataSelection);\n\n  return (\n    <div css={tickerSelectionCSS}>\n      <label css={labelCSS}>\n        Tickers\n        <input\n          css={textInputCSS}\n          type=\"text\"\n          placeholder=\"SPY,AAPL,FB,MSFT\"\n          value={tickers}\n          onChange={(event) => {\n            event.preventDefault();\n            dispatch(updateTickers(event.target.value));\n          }}\n        />\n      </label>\n    </div>\n  );\n};\n","/** @jsx jsx */\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { css, jsx } from '@emotion/core';\n\nimport { DateSelection } from './DateSelection';\nimport { TickerSelection } from './TickerSelection';\nimport { RootState } from '../redux/ReduxReducer';\nimport { processData } from './Slice';\n\nconst dataSelectionStyle = css({\n  border: 'solid',\n  borderColor: '#FFFFFF',\n  borderRadius: '0.25rem',\n  borderWidth: '2px',\n  padding: '0.5rem',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'start',\n});\n\nconst downloadButtonStyle = css({\n  border: 'solid',\n  borderColor: '#FFFFFF',\n  borderRadius: '0.25rem',\n  borderWidth: '1px',\n  padding: '0.25rem 0.5rem',\n  backgroundColor: '#023e8a',\n  alignSelf: 'flex-end',\n  cursor: 'pointer',\n});\nexport const DataSelection: React.SFC = () => {\n  const dispatch = useDispatch();\n  const { tickers, startDate, endDate } = useSelector(\n    (state: RootState) => state.dataSelection,\n  );\n  return (\n    <div css={dataSelectionStyle}>\n      <TickerSelection />\n      <DateSelection />\n      <div\n        css={downloadButtonStyle}\n        onClick={(event) => {\n          event.preventDefault();\n          dispatch(processData({ tickers, startDate, endDate }));\n        }}\n      >\n        Download\n      </div>\n    </div>\n  );\n};\n","/** @jsx jsx */\n\nimport React from 'react';\nimport { css, jsx } from '@emotion/core';\n\nimport { container } from '../cssutils/container';\n\nimport { Description } from './Description';\nimport { DataSelection } from '../dataselection/DataSelection';\n\nconst bodyStyle = css({ marginLeft: 'auto', marginRight: 'auto' }, container);\nexport const Body: React.SFC = () => (\n  <div css={bodyStyle}>\n    <Description />\n    <DataSelection />\n  </div>\n);\n","/** @jsx jsx */\n\nimport React from 'react';\nimport { css, jsx } from '@emotion/core';\n\nimport { Header } from './Header';\nimport { Body } from './Body';\n\nconst appStyle = css({\n  backgroundColor: '#111111',\n  minHeight: '100vh',\n  color: '#FFFFFF',\n});\n\nexport const App: React.SFC = () => (\n  <div css={appStyle}>\n    <Header />\n    <Body />\n  </div>\n);\n","import { css } from '@emotion/core';\n\nexport const normalizeCSS = css`\n  /*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n  /* Document\n   ========================================================================== */\n\n  /**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\n  html {\n    line-height: 1.15; /* 1 */\n    -webkit-text-size-adjust: 100%; /* 2 */\n  }\n\n  /* Sections\n   ========================================================================== */\n\n  /**\n * Remove the margin in all browsers.\n */\n\n  body {\n    margin: 0;\n  }\n\n  /**\n * Render the \\`main\\` element consistently in IE.\n */\n\n  main {\n    display: block;\n  }\n\n  /**\n * Correct the font size and margin on \\`h1\\` elements within \\`section\\` and\n * \\`article\\` contexts in Chrome, Firefox, and Safari.\n */\n\n  h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n  }\n\n  /* Grouping content\n   ========================================================================== */\n\n  /**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\n  hr {\n    box-sizing: content-box; /* 1 */\n    height: 0; /* 1 */\n    overflow: visible; /* 2 */\n  }\n\n  /**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd \\`em\\` font sizing in all browsers.\n */\n\n  pre {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n\n  /* Text-level semantics\n   ========================================================================== */\n\n  /**\n * Remove the gray background on active links in IE 10.\n */\n\n  a {\n    background-color: transparent;\n  }\n\n  /**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\n  abbr[title] {\n    border-bottom: none; /* 1 */\n    text-decoration: underline; /* 2 */\n    -webkit-text-decoration: underline dotted;\n    text-decoration: underline dotted; /* 2 */\n  }\n\n  /**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\n  b,\n  strong {\n    font-weight: bolder;\n  }\n\n  /**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd \\`em\\` font sizing in all browsers.\n */\n\n  code,\n  kbd,\n  samp {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n\n  /**\n * Add the correct font size in all browsers.\n */\n\n  small {\n    font-size: 80%;\n  }\n\n  /**\n * Prevent \\`sub\\` and \\`sup\\` elements from affecting the line height in\n * all browsers.\n */\n\n  sub,\n  sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n\n  sub {\n    bottom: -0.25em;\n  }\n\n  sup {\n    top: -0.5em;\n  }\n\n  /* Embedded content\n   ========================================================================== */\n\n  /**\n * Remove the border on images inside links in IE 10.\n */\n\n  img {\n    border-style: none;\n  }\n\n  /* Forms\n   ========================================================================== */\n\n  /**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit; /* 1 */\n    font-size: 100%; /* 1 */\n    line-height: 1.15; /* 1 */\n    margin: 0; /* 2 */\n  }\n\n  /**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\n  button,\n  input {\n    /* 1 */\n    overflow: visible;\n  }\n\n  /**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\n  button,\n  select {\n    /* 1 */\n    text-transform: none;\n  }\n\n  /**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\n  button,\n  [type='button'],\n  [type='reset'],\n  [type='submit'] {\n    -webkit-appearance: button;\n  }\n\n  /**\n * Remove the inner border and padding in Firefox.\n */\n\n  button::-moz-focus-inner,\n  [type='button']::-moz-focus-inner,\n  [type='reset']::-moz-focus-inner,\n  [type='submit']::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n\n  /**\n * Restore the focus styles unset by the previous rule.\n */\n\n  button:-moz-focusring,\n  [type='button']:-moz-focusring,\n  [type='reset']:-moz-focusring,\n  [type='submit']:-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n\n  /**\n * Correct the padding in Firefox.\n */\n\n  fieldset {\n    padding: 0.35em 0.75em 0.625em;\n  }\n\n  /**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from \\`fieldset\\` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    \\`fieldset\\` elements in all browsers.\n */\n\n  legend {\n    box-sizing: border-box; /* 1 */\n    color: inherit; /* 2 */\n    display: table; /* 1 */\n    max-width: 100%; /* 1 */\n    padding: 0; /* 3 */\n    white-space: normal; /* 1 */\n  }\n\n  /**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\n  progress {\n    vertical-align: baseline;\n  }\n\n  /**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\n  textarea {\n    overflow: auto;\n  }\n\n  /**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n  [type='checkbox'],\n  [type='radio'] {\n    box-sizing: border-box; /* 1 */\n    padding: 0; /* 2 */\n  }\n\n  /**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n  [type='number']::-webkit-inner-spin-button,\n  [type='number']::-webkit-outer-spin-button {\n    height: auto;\n  }\n\n  /**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n  [type='search'] {\n    -webkit-appearance: textfield; /* 1 */\n    outline-offset: -2px; /* 2 */\n  }\n\n  /**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n  [type='search']::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  /**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to \\`inherit\\` in Safari.\n */\n\n  ::-webkit-file-upload-button {\n    -webkit-appearance: button; /* 1 */\n    font: inherit; /* 2 */\n  }\n\n  /* Interactive\n   ========================================================================== */\n\n  /*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\n  details {\n    display: block;\n  }\n\n  /*\n * Add the correct display in all browsers.\n */\n\n  summary {\n    display: list-item;\n  }\n\n  /* Misc\n   ========================================================================== */\n\n  /**\n * Add the correct display in IE 10+.\n */\n\n  template {\n    display: none;\n  }\n\n  /**\n * Add the correct display in IE 10.\n */\n\n  [hidden] {\n    display: none;\n  }\n\n  /**\n * Manually forked from SUIT CSS Base: https://github.com/suitcss/base\n * A thin layer on top of normalize.css that provides a starting point more\n * suitable for web applications.\n */\n\n  /**\n * Removes the default spacing and border for appropriate elements.\n */\n\n  blockquote,\n  dl,\n  dd,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  hr,\n  figure,\n  p,\n  pre {\n    margin: 0;\n  }\n\n  button {\n    background-color: transparent;\n    background-image: none;\n  }\n\n  /**\n * Work around a Firefox/IE bug where the transparent \\`button\\` background\n * results in a loss of the default \\`button\\` focus styles.\n */\n\n  button:focus {\n    outline: 1px dotted;\n    outline: 5px auto -webkit-focus-ring-color;\n  }\n\n  fieldset {\n    margin: 0;\n    padding: 0;\n  }\n\n  ol,\n  ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  /**\n * Tailwind custom reset styles\n */\n\n  /**\n * 1. Use the user's configured \\`sans\\` font-family (with Tailwind's default\n *    sans-serif font stack as a fallback) as a sane default.\n * 2. Use Tailwind's default \"normal\" line-height so the user isn't forced\n *    to override it to ensure consistency even when using the default theme.\n */\n\n  html {\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI',\n      Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif,\n      'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n      'Noto Color Emoji'; /* 1 */\n    line-height: 1.5; /* 2 */\n  }\n\n  /**\n * 1. Prevent padding and border from affecting element width.\n *\n *    We used to set this in the html element and inherit from\n *    the parent element for everything else. This caused issues\n *    in shadow-dom-enhanced elements like <details> where the content\n *    is wrapped by a div with box-sizing set to \\`content-box\\`.\n *\n *    https://github.com/mozdevs/cssremedy/issues/4\n *\n *\n * 2. Allow adding a border to an element by just adding a border-width.\n *\n *    By default, the way the browser specifies that an element should have no\n *    border is by setting it's border-style to \\`none\\` in the user-agent\n *    stylesheet.\n *\n *    In order to easily add borders to elements by just setting the \\`border-width\\`\n *    property, we change the default border-style for all elements to \\`solid\\`, and\n *    use border-width to hide them instead. This way our \\`border\\` utilities only\n *    need to set the \\`border-width\\` property instead of the entire \\`border\\`\n *    shorthand, making our border utilities much more straightforward to compose.\n *\n *    https://github.com/tailwindcss/tailwindcss/pull/116\n */\n\n  *,\n  ::before,\n  ::after {\n    box-sizing: border-box; /* 1 */\n    border-width: 0; /* 2 */\n    border-style: solid; /* 2 */\n    border-color: #e2e8f0; /* 2 */\n  }\n\n  /*\n * Ensure horizontal rules are visible by default\n */\n\n  hr {\n    border-top-width: 1px;\n  }\n\n  /**\n * Undo the \\`border-style: none\\` reset that Normalize applies to images so that\n * our \\`border-{width}\\` utilities have the expected effect.\n *\n * The Normalize reset is unnecessary for us since we default the border-width\n * to 0 on all elements.\n *\n * https://github.com/tailwindcss/tailwindcss/issues/362\n */\n\n  img {\n    border-style: solid;\n  }\n\n  textarea {\n    resize: vertical;\n  }\n\n  input:-ms-input-placeholder,\n  textarea:-ms-input-placeholder {\n    color: #a0aec0;\n  }\n\n  input::-ms-input-placeholder,\n  textarea::-ms-input-placeholder {\n    color: #a0aec0;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: #a0aec0;\n  }\n\n  button,\n  [role='button'] {\n    cursor: pointer;\n  }\n\n  table {\n    border-collapse: collapse;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    font-size: inherit;\n    font-weight: inherit;\n  }\n\n  /**\n * Reset links to optimize for opt-in styling instead of\n * opt-out.\n */\n\n  a {\n    color: inherit;\n    text-decoration: inherit;\n  }\n\n  /**\n * Reset form element properties that are easy to forget to\n * style explicitly so you don't inadvertently introduce\n * styles that deviate from your design system. These styles\n * supplement a partial reset that is already applied by\n * normalize.css.\n */\n\n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    padding: 0;\n    line-height: inherit;\n    color: inherit;\n  }\n\n  /**\n * Use the configured 'mono' font family for elements that\n * are expected to be rendered with a monospace font, falling\n * back to the system monospace stack if there is no configured\n * 'mono' font family.\n */\n\n  pre,\n  code,\n  kbd,\n  samp {\n    font-family: Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New',\n      monospace;\n  }\n\n  /**\n * Make replaced elements \\`display: block\\` by default as that's\n * the behavior you want almost all of the time. Inspired by\n * CSS Remedy, with \\`svg\\` added as well.\n *\n * https://github.com/mozdevs/cssremedy/issues/14\n */\n\n  img,\n  svg,\n  video,\n  canvas,\n  audio,\n  iframe,\n  embed,\n  object {\n    display: block;\n    vertical-align: middle;\n  }\n\n  /**\n * Constrain images and videos to the parent width and preserve\n * their instrinsic aspect ratio.\n *\n * https://github.com/mozdevs/cssremedy/issues/14\n */\n\n  img,\n  video {\n    max-width: 100%;\n    height: auto;\n  }\n`;\n","import React from 'react';\n\nimport { Global, css } from '@emotion/core';\n\nimport { normalizeCSS } from './normalizeCSS';\n\nconst normalizeStyle = css(normalizeCSS);\n\nexport const RootStyling = () => <Global styles={normalizeStyle} />;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { dataSelectionReducer } from '../dataselection/Slice';\n\nexport const rootReducer = combineReducers({\n  dataSelection: dataSelectionReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { rootReducer } from './ReduxReducer';\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport { App } from './basepage/App';\nimport { RootStyling } from './cssutils/RootStyling';\nimport { store } from './redux/ReduxStore';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RootStyling />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}